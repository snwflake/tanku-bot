name: Release

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3.5.2
      - name: install wireguard
        run: sudo apt update && sudo apt install -y wireguard iproute2 openresolv curl
      - name: create wg0
        env:
          endpoint: '${{ secrets.WG_ENDPOINT }}'
          endpoint_public_key: '${{ secrets.WG_ENDPOINT_PUBKEY }}'
          ips: '${{ secrets.WG_IPS }}'
          allowed_ips: '${{ secrets.WG_ALLOWED_IPS }}'
          private_key: '${{ secrets.WG_KEY }}'
        run: |
          readonly wg0conf="
          [Interface]
          PrivateKey = ${private_key}
          Address = ${ips}

          [Peer]
          PublicKey = ${endpoint_public_key}
          AllowedIPs = ${allowed_ips}
          Endpoint = ${endpoint}
          "
          sudo touch /etc/wireguard/wg0.conf
          echo "${wg0conf}" | sudo tee -- /etc/wireguard/wg0.conf > /dev/null
          wg-quick up wg0
      - name: setup ssh on the runner
        env:
          ssh_key: '${{ secrets.SSH_KEY }}'
          known_host: '${{ secrets.KNOWN_HOST }}'
          deploy_user: '${{ secrets.DEPLOY_USER }}'
          remote_host: '${{ secrets.REMOTE_HOST }}'
        run: |
          mkdir -p /home/runner/.ssh && chmod 700 /home/runner/.ssh
          touch /home/runner/.ssh/deploy_key
          touch /home/runner/.ssh/config
          chmod 600 /home/runner/.ssh/*
          touch /home/runner/.ssh/known_hosts
          echo "${ssh_key}" | tee -- ~/.ssh/deploy_key > /dev/null
          echo "${known_host}" | tee -- ~/.ssh/known_hosts > /dev/null
          readonly ssh_conf="
          Host target
            HostName ${remote_host}
            User ${deploy_user}
            IdentityFile ~/.ssh/deploy_key
          "
          echo "${ssh_conf}" | tee -- ~/.ssh/config > /dev/null
      - name: attempt to compose remote up
        env:
          deploy_user: '${{ secrets.DEPLOY_USER }}'
          BOT_TOKEN: '${{ secrets.BOT_TOKEN }}'
          DB: '${{ secrets.DB }}'
          GUILD_ID: '${{ secrets.GUILD_ID }}'
          APP_ID: '${{ secrets.APP_ID }}'
          CLAN_ID: '${{ secrets.CLAN_ID }}'
          ALLOWED_ACCOUNT_ID: '${{ secrets.ALLOWED_ACCOUNT_ID }}'
        run: |
          docker context create remote --docker "host=ssh://${deploy_user}@target"
          docker context use remote
          docker compose down --rmi all && docker compose up --build -d
